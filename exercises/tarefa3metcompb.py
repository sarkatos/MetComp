# -*- coding: utf-8 -*-
"""Tarefa3MetCompB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1daPU_YcfaV_yea3NMMzuF7zc5Lc2eamq
"""

import numpy as np
import matplotlib.pyplot as plt
from random import random

seed = 321659
def randi(a = 1029,b = 221591,c = 1048576):
	global seed
	a = 1029; b = 221591; c = 1048576
	seed = (seed*a + b)%c
	return float(seed)/c

def dado():  
  return int(6*randi()) + 1

def moeda(l=1):
	if l == 1:
		m = 2*int(2*randi())-1
	else:
		m = 2*int(2*random())-1
	return m
def remove_repetidos_lista(lista):
    l = []
    for i in lista:
        if i not in l:
            l.append(i)
    l.sort()
    return l

N = 1000
M = 100
# teste dos dados
media1 = []
media2 = []
variancia1 = []
variancia2 = []
for j in range(M):
  # gerador randi de congruencia
  lancamentos = [] 
  for i in range(N):
    k = dado()
    lancamentos.append(k)
  a = np.array(lancamentos)
  # Calculando média e variância "populacional"
  media1.append(np.sum(a)/N)
  variancia1.append(np.var(a))
  # gerador com biblioteca random da python
  lancamentos = []
  for i in range(N):
    k = int(6*random()) + 1
    lancamentos.append(k)
  a = np.array(lancamentos)
  # Calculando média e variância "populacional"
  media2.append(np.sum(a)/N)
  variancia2.append(np.var(a))
  seed = seed*j # cada série de N lançamentos muda a semente
# plotando as medias e variancias
plt.figure(figsize= (10,5))
plt.plot(range(len(media1)),media1,label='medias congruencia')
plt.plot(range(len(variancia1)),variancia1,label='variancia congruencia')
plt.plot(range(len(media2)),media2,label='medias random')
plt.plot(range(len(variancia2)),variancia2,label='variancia random')
plt.xlabel('Baterias de Rolagens')
plt.ylabel('Medias e variância das faces')
plt.legend()
plt.show()

N = 10**4
M = 100
# Teste do caminhante "aleatório"
media1 = []
media2 = []
variancia1 = []
variancia2 = []
trajetorias1 = []
trajetorias2 = []
for j in range(M):
  # gerador randi de congruencia
  caminhos = [0] 
  walk = 0
  for t in range(1,N):
    walk += moeda()
    caminhos.append(walk)
  a = np.array(caminhos)
  trajetorias1.append(a)
  # Calculando média e variância "populacional"
  media1.append(np.sum(a)/N)
  variancia1.append(np.var(a))
  # gerador com biblioteca random da python
  caminhos = [0] 
  walk = 0
  for t in range(1,N):
    walk += moeda(5)
    caminhos.append(walk)
  a = np.array(caminhos)
  trajetorias2.append(a)
  # Calculando média e variância "populacional"
  media2.append(np.sum(a)/N)
  variancia2.append(np.var(a))
  seed = seed*j # cada série de N lançamentos muda a semente
# plotando as trajetórias
for i in range(M):
  plt.plot(range(N),trajetorias1[i])
  plt.title('Trajetórias com gerador de congruência')
plt.xlabel('Passos')
plt.ylabel('Posições')
plt.show()
for i in range(M):
  plt.plot(range(N),trajetorias2[i])
  plt.title('Trajetórias com gerador biblioteca random')
plt.xlabel('Passos')
plt.ylabel('Posições')
plt.show()
# plotando as medias e variancias
plt.figure(figsize= (10,5))
plt.plot(range(len(media1)),media1,label='medias congruencia')
plt.plot(range(len(variancia1)),variancia1,label='variancia congruencia')
plt.plot(range(len(media2)),media2,label='medias random')
plt.plot(range(len(variancia2)),variancia2,label='variancia random')
plt.xlabel('Passos')
plt.ylabel('Medias e variância das posições')
plt.legend()
plt.show()

# O teste tendencioso
M = 100
N = 10**4
somatorio1 = []
somatorio2 = []
somatorio3 = []
somatorio4 = []
media1 = []
media2 = []
media3 = []
media4 = []
variancia1 = []
variancia2 = []
variancia3 = []
variancia4 = []
for j in range(M):
 # gerador randi de congruencia
  distorcido = [0]*N
  n_distorcido = []
  for i in range(0,N,2):
    distorcido[i] = moeda()
    distorcido[i+1] = moeda()
    if distorcido[i] != distorcido[i+1]:
      n_distorcido.append(distorcido[i])

  # teste do somatório
  somatorio1.append(np.sum(np.array(distorcido)))
  media1.append(np.sum(np.array(distorcido))/N)
  variancia1.append(np.var(np.array(distorcido)))
  somatorio2.append(np.sum(np.array(n_distorcido)))
  media2.append(np.sum(np.array(distorcido))/N)
  variancia2.append(np.var(np.array(distorcido)))
# gerador com biblioteca random da python
  distorcido = [0]*N
  n_distorcido = []
  for i in range(0,N,2):
    distorcido[i] = moeda()
    distorcido[i+1] = moeda()
    if distorcido[i] != distorcido[i+1]:
      n_distorcido.append(distorcido[i])

  # teste do somatório
  somatorio3.append(np.sum(np.array(distorcido)))
  media3.append(np.sum(np.array(distorcido))/N)
  variancia3.append(np.var(np.array(distorcido)))
  somatorio4.append(np.sum(np.array(n_distorcido)))
  media4.append(np.sum(np.array(distorcido))/N)
  variancia4.append(np.var(np.array(distorcido)))
plt.plot(range(M),somatorio1,label='Distorcidos congruencia')
plt.plot(range(M),somatorio2,label='Não Distorcidos congruencia')
plt.plot(range(M),somatorio3,label='Distorcidos random')
plt.plot(range(M),somatorio4,label='Não Distorcidos random')
plt.title("Somatórios dos 1 e -1")
plt.xlabel('Repetições')
plt.ylabel('Somatórios')
plt.legend()
plt.show()
plt.plot(range(M),media1,label='Distorcidos congruencia')
plt.plot(range(M),media2,label='Não Distorcidos congruencia')
plt.plot(range(M),media3,label='Distorcidos random')
plt.plot(range(M),media4,label='Não Distorcidos random')
plt.title("Médias dos Somatórios dos 1 e -1")
plt.xlabel('Repetições')
plt.ylabel('Médias')
plt.legend()
plt.show()
plt.plot(range(M),variancia1,label='Distorcidos congruencia')
plt.plot(range(M),variancia2,label='Não Distorcidos congruencia')
plt.plot(range(M),variancia3,label='Distorcidos random')
plt.plot(range(M),variancia4,label='Não Distorcidos random')
plt.title("Variâncias dos Somatórios dos 1 e -1")
plt.xlabel('Repetições')
plt.ylabel('Variâncias')
plt.legend()
plt.show()